//     MIT License
//
//    Copyright (c) Microsoft Corporation.
//
//    Permission is hereby granted, free of charge, to any person obtaining a copy
//    of this software and associated documentation files (the "Software"), to deal
//    in the Software without restriction, including without limitation the rights
//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    copies of the Software, and to permit persons to whom the Software is
//    furnished to do so, subject to the following conditions:
//
//    The above copyright notice and this permission notice shall be included in all
//    copies or substantial portions of the Software.
//
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//    SOFTWARE


`timescale 1ns / 1ps

`define MDU_COMPRESSED_ITEM_WIDTH   8
`define MDU_MAX_INPUT_LOG2          18
`define MDU_RANS_LOWER_LIMIT_BIT    24
`define MDU_FEEDER_INPUT_COUNT_LOG2 3       // in units of "MDU_COMPRESSED_ITEM_WIDTH"

`define MDU_RANS_LOWER_LIMIT        (1<<`MDU_RANS_LOWER_LIMIT_BIT)
`define MDU_FEEDER_INPUT_COUNT      (1<<`MDU_FEEDER_INPUT_COUNT_LOG2)
`define MDU_FEEDER_INPUT_WIDTH      (`MDU_FEEDER_INPUT_COUNT * `MDU_COMPRESSED_ITEM_WIDTH)

`define MDU_RANS_FEED_WINDOW   8     // number of items fed to the decoder array each update cycle 
`define MDU_RANS_ALPHABET_W    4 
`define MDU_RANS_STATE_BITS    32
`define MDU_RANS_PROB_BITS     16
`define MDU_RANS_RENORM_BITS   8     // Number of bits of input we consume at a time per rANS decoder
`define MDU_RANS_NUM_DEC       18
`define MDU_RANS_SYMOUT_W      9
`define MDU_RANS_ELMT_CNT_W    32 



// PHASE 1                                              PHASE 0
//
// decoder                                              decoder
//  - read from input buffer                             - compute forward distribution 
//  - compute inverse distribution                       - update rANS state
//  - write symbol to output buffer if valid
//
// feeder                                               feeder
//                                                       - write to input buffer
//
// symbol vector assembly                               symbol vector assembly
//  - output complete symvec                             - transfer symbol from decoder output buffer to symvec buffer
//  
//
// STALLING
// 
//  stall (P0 then P1) if:
//   - feeder input starved
//   - symvec buffer full and downstream not ready

`include "mdu_defines.vh"

module decoder(
	       
	       // control / config
	       input 				      clk,
	       input 				      nrst,
	       input [3:0] 			      alphabet_bits,
	       input 				      go,
	       input [31:0] 			      out_target,
	       input 				      array_stall,
	       output reg 			      done,
	       output reg 			      error_overrun, 

	       // interface to feeder
	       input 				      din_valid,
	       input [`MDU_COMPRESSED_ITEM_WIDTH-1:0] din,
	       output 				      din_ready,
	       output 				      din_req,

	       // interface to downstream
	       output 				      sym_valid,
	       output reg [`MDU_RANS_SYMOUT_W-1:0]    sym,
	       input 				      sym_ready    
	       );

   reg [3:0] 					      eab; // effective alphabet bits (i.e. # of bits in the alphabet - # of msbs guaranteed to be zero)
   reg [3:0] 					      current_q;
   
   wire [`MDU_RANS_PROB_BITS-1:0] 		      base_table[9][16][10];
   assign base_table = '{
			 '{ // alphabet size = 1 bit
			    '{0,32768,0,0,0,0,0,0,0,0},
			    '{0,38761,0,0,0,0,0,0,0,0},
			    '{0,44484,0,0,0,0,0,0,0,0},
			    '{0,49818,0,0,0,0,0,0,0,0},
			    '{0,54623,0,0,0,0,0,0,0,0},
			    '{0,58721,0,0,0,0,0,0,0,0},
			    '{0,61911,0,0,0,0,0,0,0,0},
			    '{0,64036,0,0,0,0,0,0,0,0},
			    '{0,65121,0,0,0,0,0,0,0,0},
			    '{0,65477,0,0,0,0,0,0,0,0},
			    '{0,65534,0,0,0,0,0,0,0,0},
			    '{0,65535,0,0,0,0,0,0,0,0},
			    '{0,65535,0,0,0,0,0,0,0,0},
			    '{0,65535,0,0,0,0,0,0,0,0},
			    '{0,65535,0,0,0,0,0,0,0,0},
			    '{0,65535,0,0,0,0,0,0,0,0}
			    },'{ // alphabet size = 2 bits
				 '{0,16384,32768,0,0,0,0,0,0,0},
				 '{0,21168,38760,0,0,0,0,0,0,0},
				 '{0,26354,44484,0,0,0,0,0,0,0},
				 '{0,31900,49818,0,0,0,0,0,0,0},
				 '{0,37750,54624,0,0,0,0,0,0,0},
				 '{0,43800,58720,0,0,0,0,0,0,0},
				 '{0,49850,61912,0,0,0,0,0,0,0},
				 '{0,55537,64036,0,0,0,0,0,0,0},
				 '{0,60308,65120,0,0,0,0,0,0,0},
				 '{0,63575,65476,0,0,0,0,0,0,0},
				 '{0,65132,65534,0,0,0,0,0,0,0},
				 '{0,65511,65534,0,0,0,0,0,0,0},
				 '{0,65533,65534,0,0,0,0,0,0,0},
				 '{0,65533,65534,0,0,0,0,0,0,0},
				 '{0,65533,65534,0,0,0,0,0,0,0},
				 '{0,65533,65534,0,0,0,0,0,0,0}
				 },'{ // alphabet size = 3 bits
				      '{0,8192,16384,32768,0,0,0,0,0,0},
				      '{0,11073,21168,38760,0,0,0,0,0,0},
				      '{0,14406,26354,44484,0,0,0,0,0,0},
				      '{0,18234,31900,49816,0,0,0,0,0,0},
				      '{0,22624,37750,54624,0,0,0,0,0,0},
				      '{0,27657,43800,58720,0,0,0,0,0,0},
				      '{0,33414,49850,61912,0,0,0,0,0,0},
				      '{0,39920,55536,64036,0,0,0,0,0,0},
				      '{0,47024,60308,65120,0,0,0,0,0,0},
				      '{0,54201,63576,65476,0,0,0,0,0,0},
				      '{0,60388,65132,65532,0,0,0,0,0,0},
				      '{0,64250,65512,65532,0,0,0,0,0,0},
				      '{0,65456,65530,65532,0,0,0,0,0,0},
				      '{0,65529,65530,65532,0,0,0,0,0,0},
				      '{0,65529,65530,65532,0,0,0,0,0,0},
				      '{0,65529,65530,65532,0,0,0,0,0,0}
				      },'{ // alphabet size = 4 bits
					   '{0,4096,8192,16384,32768,0,0,0,0,0},
					   '{0,5665,11072,21168,38760,0,0,0,0,0},
					   '{0,7539,14406,26352,44480,0,0,0,0,0},
					   '{0,9773,18234,31900,49816,0,0,0,0,0},
					   '{0,12447,22624,37752,54624,0,0,0,0,0},
					   '{0,15679,27656,43800,58720,0,0,0,0,0},
					   '{0,19640,33414,49848,61912,0,0,0,0,0},
					   '{0,24559,39920,55536,64032,0,0,0,0,0},
					   '{0,30704,47024,60308,65120,0,0,0,0,0},
					   '{0,38280,54200,63576,65480,0,0,0,0,0},
					   '{0,47169,60388,65132,65528,0,0,0,0,0},
					   '{0,56354,64250,65512,65528,0,0,0,0,0},
					   '{0,63248,65456,65524,65528,0,0,0,0,0},
					   '{0,65465,65522,65524,65528,0,0,0,0,0},
					   '{0,65521,65522,65524,65528,0,0,0,0,0},
					   '{0,65521,65522,65524,65528,0,0,0,0,0}
					   },'{ // alphabet size = 5 bits
						'{0,2048,4096,8192,16384,32768,0,0,0,0},
						'{0,2865,5664,11072,21168,38768,0,0,0,0},
						'{0,3858,7540,14408,26352,44480,0,0,0,0},
						'{0,5063,9772,18232,31904,49824,0,0,0,0},
						'{0,6536,12448,22624,37752,54624,0,0,0,0},
						'{0,8366,15680,27656,43800,58720,0,0,0,0},
						'{0,10688,19640,33416,49848,61904,0,0,0,0},
						'{0,13713,24560,39920,55536,64032,0,0,0,0},
						'{0,17758,30704,47024,60304,65120,0,0,0,0},
						'{0,23272,38280,54200,63576,65472,0,0,0,0},
						'{0,30841,47168,60388,65136,65520,0,0,0,0},
						'{0,41006,56354,64248,65512,65520,0,0,0,0},
						'{0,53291,63248,65456,65512,65520,0,0,0,0},
						'{0,63380,65464,65508,65512,65520,0,0,0,0},
						'{0,65505,65506,65508,65512,65520,0,0,0,0},
						'{0,65505,65506,65508,65512,65520,0,0,0,0}
						},'{ // alphabet size = 6 bits
						     '{0,1024,2048,4096,8192,16384,32768,0,0,0},
						     '{0,1441,2864,5664,11072,21168,38752,0,0,0},
						     '{0,1951,3858,7540,14408,26352,44480,0,0,0},
'{0,2577,5064,9772,18232,31904,49824,0,0,0},
'{0,3350,6536,12448,22624,37744,54624,0,0,0},
'{0,4324,8366,15680,27656,43808,58720,0,0,0},
'{0,5581,10688,19640,33416,49856,61920,0,0,0},
'{0,7258,13712,24560,39920,55536,64032,0,0,0},
'{0,9579,17758,30704,47024,60304,65120,0,0,0},
'{0,12907,23272,38280,54200,63568,65472,0,0,0},
'{0,17852,30840,47168,60384,65136,65504,0,0,0},
'{0,25441,41006,56352,64248,65488,65504,0,0,0},
'{0,37208,53292,63248,65456,65488,65504,0,0,0},
'{0,53649,63380,65464,65480,65488,65504,0,0,0},
'{0,65147,65474,65476,65480,65488,65504,0,0,0},
'{0,65473,65474,65476,65480,65488,65504,0,0,0}
},'{ // alphabet size = 7 bits
'{0,512,1024,2048,4096,8192,16384,32768,0,0},
'{0,722,1440,2864,5664,11072,21184,38784,0,0},
'{0,981,1952,3856,7536,14400,26368,44480,0,0},
'{0,1300,2576,5064,9776,18240,31904,49792,0,0},
'{0,1696,3350,6536,12448,22624,37760,54592,0,0},
'{0,2198,4324,8368,15680,27664,43808,58752,0,0},
'{0,2852,5580,10688,19640,33408,49856,61888,0,0},
'{0,3736,7258,13712,24560,39920,55552,64064,0,0},
'{0,4979,9580,17760,30704,47024,60320,65152,0,0},
'{0,6807,12908,23272,38280,54208,63584,65472,0,0},
'{0,9634,17852,30840,47168,60384,65120,65472,0,0},
'{0,14275,25440,41008,56352,64256,65440,65472,0,0},
'{0,22449,37208,53292,63248,65424,65440,65472,0,0},
'{0,37625,53648,63380,65416,65424,65440,65472,0,0},
'{0,60485,65148,65412,65416,65424,65440,65472,0,0},
'{0,65409,65410,65412,65416,65424,65440,65472,0,0}
},'{ // alphabet size = 8 bits
'{0,256,512,1024,2048,4096,8192,16384,32768,0},
'{0,362,722,1440,2864,5664,11072,21184,38784,0},
'{0,492,980,1952,3856,7536,14400,26368,44544,0},
'{0,653,1300,2576,5064,9776,18240,31872,49792,0},
'{0,853,1696,3352,6536,12448,22624,37760,54656,0},
'{0,1108,2198,4324,8368,15680,27648,43776,58752,0},
'{0,1442,2852,5580,10688,19648,33408,49856,61952,0},
'{0,1895,3736,7256,13712,24560,39936,55552,64000,0},
'{0,2538,4980,9580,17760,30704,47040,60288,65152,0},
'{0,3497,6808,12908,23272,38272,54208,63552,65408,0},
'{0,5008,9634,17852,30840,47168,60384,65152,65408,0},
'{0,7575,14276,25440,41008,56352,64256,65344,65408,0},
'{0,12397,22448,37208,53288,63248,65312,65344,65408,0},
'{0,22767,37624,53648,63376,65296,65312,65344,65408,0},
'{0,47343,60484,65148,65288,65296,65312,65344,65408,0},
'{0,65281,65282,65284,65288,65296,65312,65344,65408,0}
},'{ // alphabet size = 9 bits
'{0,128,256,512,1024,2048,4096,8192,16384,32768},
'{0,181,362,720,1440,2864,5664,11072,21120,38656},
'{0,246,492,980,1952,3856,7552,14400,26368,44544},
'{0,327,652,1300,2576,5056,9760,18240,31872,49920},
'{0,428,852,1696,3352,6528,12448,22656,37760,54528},
'{0,557,1108,2200,4320,8368,15680,27648,43776,58624},
'{0,725,1442,2852,5584,10688,19648,33408,49792,61952},
'{0,955,1896,3736,7256,13712,24544,39936,55552,64000},
'{0,1282,2538,4980,9576,17760,30720,47040,60288,65024},
'{0,1772,3496,6808,12904,23264,38272,54208,63616,65280},
'{0,2554,5008,9632,17856,30848,47168,60416,65152,65280},
'{0,3904,7576,14276,25440,41008,56352,64256,65152,65280},
'{0,6523,12396,22448,37208,53296,63232,65088,65152,65280},
'{0,12594,22768,37624,53648,63376,65056,65088,65152,65280},
'{0,31006,47344,60484,65032,65040,65056,65088,65152,65280},
'{0,65025,65026,65028,65032,65040,65056,65088,65152,65280}
}
}; // end base_table

   wire [(`MDU_RANS_PROB_BITS)-1:0]        base_table_sel1[16][10];
   assign base_table_sel1 = base_table[eab];
   reg [(`MDU_RANS_PROB_BITS)-1:0]         base_table_sel2[10];

wire [`MDU_RANS_PROB_BITS-1:0] freq_table[9][16][10];
assign freq_table = '{
'{ // alphabet size = 1 bit
'{32768,32768,0,0,0,0,0,0,0,0},
'{38761,26775,0,0,0,0,0,0,0,0},
'{44484,21052,0,0,0,0,0,0,0,0},
'{49818,15718,0,0,0,0,0,0,0,0},
'{54623,10913,0,0,0,0,0,0,0,0},
'{58721,6815,0,0,0,0,0,0,0,0},
'{61911,3625,0,0,0,0,0,0,0,0},
'{64036,1500,0,0,0,0,0,0,0,0},
'{65121,415,0,0,0,0,0,0,0,0},
'{65477,59,0,0,0,0,0,0,0,0},
'{65534,2,0,0,0,0,0,0,0,0},
'{65535,1,0,0,0,0,0,0,0,0},
'{65535,1,0,0,0,0,0,0,0,0},
'{65535,1,0,0,0,0,0,0,0,0},
'{65535,1,0,0,0,0,0,0,0,0},
'{65535,1,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 2 bits
'{16384,16384,16384,0,0,0,0,0,0,0},
'{21168,17592,13388,0,0,0,0,0,0,0},
'{26354,18130,10526,0,0,0,0,0,0,0},
'{31900,17918,7859,0,0,0,0,0,0,0},
'{37750,16874,5456,0,0,0,0,0,0,0},
'{43800,14920,3408,0,0,0,0,0,0,0},
'{49850,12062,1812,0,0,0,0,0,0,0},
'{55537,8499,750,0,0,0,0,0,0,0},
'{60308,4812,208,0,0,0,0,0,0,0},
'{63575,1901,30,0,0,0,0,0,0,0},
'{65132,402,1,0,0,0,0,0,0,0},
'{65511,23,1,0,0,0,0,0,0,0},
'{65533,1,1,0,0,0,0,0,0,0},
'{65533,1,1,0,0,0,0,0,0,0},
'{65533,1,1,0,0,0,0,0,0,0},
'{65533,1,1,0,0,0,0,0,0,0}
},'{ // alphabet size = 3 bits
'{8192,8192,8192,8192,0,0,0,0,0,0},
'{11073,10095,8796,6694,0,0,0,0,0,0},
'{14406,11948,9065,5263,0,0,0,0,0,0},
'{18234,13666,8958,3930,0,0,0,0,0,0},
'{22624,15126,8437,2728,0,0,0,0,0,0},
'{27657,16143,7460,1704,0,0,0,0,0,0},
'{33414,16436,6031,906,0,0,0,0,0,0},
'{39920,15616,4250,375,0,0,0,0,0,0},
'{47024,13284,2406,104,0,0,0,0,0,0},
'{54201,9375,950,15,0,0,0,0,0,0},
'{60388,4744,200,1,0,0,0,0,0,0},
'{64250,1262,10,1,0,0,0,0,0,0},
'{65456,74,1,1,0,0,0,0,0,0},
'{65529,1,1,1,0,0,0,0,0,0},
'{65529,1,1,1,0,0,0,0,0,0},
'{65529,1,1,1,0,0,0,0,0,0}
},'{ // alphabet size = 4 bits
'{4096,4096,4096,4096,4096,0,0,0,0,0},
'{5665,5407,5048,4398,3347,0,0,0,0,0},
'{7539,6867,5973,4532,2632,0,0,0,0,0},
'{9773,8461,6833,4479,1965,0,0,0,0,0},
'{12447,10177,7564,4218,1364,0,0,0,0,0},
'{15679,11977,8072,3730,852,0,0,0,0,0},
'{19640,13774,8217,3016,453,0,0,0,0,0},
'{24559,15361,7808,2124,188,0,0,0,0,0},
'{30704,16320,6642,1203,52,0,0,0,0,0},
'{38280,15920,4688,476,7,0,0,0,0,0},
'{47169,13219,2372,99,1,0,0,0,0,0},
'{56354,7896,631,4,1,0,0,0,0,0},
'{63248,2208,34,1,1,0,0,0,0,0},
'{65465,57,1,1,1,0,0,0,0,0},
'{65521,1,1,1,1,0,0,0,0,0},
'{65521,1,1,1,1,0,0,0,0,0}
},'{ // alphabet size = 5 bits
'{2048,2048,2048,2048,2048,2048,0,0,0,0},
'{2865,2799,2704,2524,2200,1673,0,0,0,0},
'{3858,3682,3434,2986,2266,1316,0,0,0,0},
'{5063,4709,4230,3418,2240,982,0,0,0,0},
'{6536,5912,5088,3782,2109,682,0,0,0,0},
'{8366,7314,5988,4036,1865,426,0,0,0,0},
'{10688,8952,6888,4108,1507,227,0,0,0,0},
'{13713,10847,7680,3904,1062,94,0,0,0,0},
'{17758,12946,8160,3320,602,26,0,0,0,0},
'{23272,15008,7960,2344,237,4,0,0,0,0},
'{30841,16327,6610,1187,48,1,0,0,0,0},
'{41006,15348,3947,316,1,1,0,0,0,0},
'{53291,9957,1104,14,1,1,0,0,0,0},
'{63380,2084,22,1,1,1,0,0,0,0},
'{65505,1,1,1,1,1,0,0,0,0},
'{65505,1,1,1,1,1,0,0,0,0}
},'{ // alphabet size = 6 bits
'{1024,1024,1024,1024,1024,1024,1024,0,0,0},
'{1441,1423,1400,1352,1262,1099,837,0,0,0},
'{1951,1907,1841,1717,1493,1133,658,0,0,0},
'{2577,2487,2354,2115,1709,1120,491,0,0,0},
'{3350,3186,2956,2544,1890,1055,341,0,0,0},
'{4324,4042,3657,2994,2019,932,213,0,0,0},
'{5581,5107,4476,3444,2055,754,113,0,0,0},
'{7258,6454,5424,3840,1952,531,47,0,0,0},
'{9579,8179,6473,4080,1660,301,13,0,0,0},
'{12907,10365,7504,3980,1171,119,2,0,0,0},
'{17852,12988,8164,3304,594,23,1,0,0,0},
'{25441,15565,7673,1974,155,1,1,0,0,0},
'{37208,16084,4978,552,4,1,1,0,0,0},
'{53649,9731,1042,4,1,1,1,0,0,0},
'{65147,327,1,1,1,1,1,0,0,0},
'{65473,1,1,1,1,1,1,0,0,0}
},'{ // alphabet size = 7 bits
'{512,512,512,512,512,512,512,512,0,0},
'{722,718,712,700,676,632,550,418,0,0},
'{981,971,952,920,858,748,566,329,0,0},
'{1300,1276,1244,1178,1058,854,559,246,0,0},
'{1696,1654,1593,1478,1272,946,526,171,0,0},
'{2198,2126,2022,1828,1498,1009,467,106,0,0},
'{2852,2728,2554,2238,1721,1028,376,57,0,0},
'{3736,3522,3227,2712,1920,977,266,23,0,0},
'{4979,4601,4090,3236,2040,831,151,6,0,0},
'{6807,6101,5182,3752,1991,586,59,1,0,0},
'{9634,8218,6494,4082,1652,296,11,1,0,0},
'{14275,11165,7784,3836,988,74,1,1,0,0},
'{22449,14759,8042,2489,272,1,1,1,0,0},
'{37625,16023,4866,509,1,1,1,1,0,0},
'{60485,4663,132,1,1,1,1,1,0,0},
'{65409,1,1,1,1,1,1,1,0,0}
},'{ // alphabet size = 8 bits
'{256,256,256,256,256,256,256,256,256,0},
'{362,360,359,356,350,338,316,275,209,0},
'{492,488,486,476,460,429,374,284,164,0},
'{653,647,638,622,589,529,426,280,123,0},
'{853,843,828,796,739,636,473,264,85,0},
'{1108,1090,1063,1011,914,748,504,234,53,0},
'{1442,1410,1364,1277,1120,860,514,189,28,0},
'{1895,1841,1760,1614,1356,961,488,132,12,0},
'{2538,2442,2300,2045,1618,1021,414,76,3,0},
'{3497,3311,3050,2591,1875,996,292,29,1,0},
'{5008,4626,4109,3247,2041,826,149,4,1,0},
'{7575,6701,5582,3892,1918,494,34,1,1,0},
'{12397,10051,7380,4020,1245,129,1,1,1,0},
'{22767,14857,8012,2432,240,1,1,1,1,0},
'{47343,13141,2332,35,1,1,1,1,1,0},
'{65281,1,1,1,1,1,1,1,1,0}
},'{ // alphabet size = 9 bits
'{128,128,128,128,128,128,128,128,128,128},
'{181,181,179,180,178,175,169,157,137,105},
'{246,246,244,243,238,231,214,187,142,82},
'{327,325,324,319,310,294,265,213,141,61},
'{428,424,422,414,397,370,319,236,131,43},
'{557,551,546,530,506,457,374,252,116,27},
'{725,717,705,683,638,560,430,256,95,14},
'{955,941,920,880,807,677,481,244,66,6},
'{1282,1256,1221,1149,1023,810,510,207,37,2},
'{1772,1724,1656,1524,1295,938,498,147,13,1},
'{2554,2454,2312,2056,1624,1020,414,74,1,1},
'{3904,3672,3350,2791,1946,959,247,14,1,1},
'{6523,5873,5026,3690,2011,621,58,1,1,1},
'{12594,10174,7428,4006,1216,105,1,1,1,1},
'{31006,16338,6570,1137,1,1,1,1,1,1},
'{65025,1,1,1,1,1,1,1,1,1}
}
}; // end freq_table

  wire [(`MDU_RANS_PROB_BITS)-1:0] freq_table_sel1[16][10];
  assign freq_table_sel1 = freq_table[eab];
  reg  [(`MDU_RANS_PROB_BITS)-1:0] freq_table_sel2[10];

wire [`MDU_RANS_PROB_BITS-1:0] rf_table[9][16][10];
assign rf_table = '{
'{ // alphabet size = 1 bit
'{32768,32768,0,0,0,0,0,0,0,0},
'{55403,40102,0,0,0,0,0,0,0,0},
'{48275,51004,0,0,0,0,0,0,0,0},
'{43107,34156,0,0,0,0,0,0,0,0},
'{39315,49196,0,0,0,0,0,0,0,0},
'{36571,39389,0,0,0,0,0,0,0,0},
'{34687,37026,0,0,0,0,0,0,0,0},
'{33536,44739,0,0,0,0,0,0,0,0},
'{32977,40427,0,0,0,0,0,0,0,0},
'{32798,35545,0,0,0,0,0,0,0,0},
'{32769,32768,0,0,0,0,0,0,0,0},
'{32769,32768,0,0,0,0,0,0,0,0},
'{32769,32768,0,0,0,0,0,0,0,0},
'{32769,32768,0,0,0,0,0,0,0,0},
'{32769,32768,0,0,0,0,0,0,0,0},
'{32769,32768,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 2 bits
'{32768,32768,32768,0,0,0,0,0,0,0},
'{50725,61036,40101,0,0,0,0,0,0,0},
'{40743,59225,51004,0,0,0,0,0,0,0},
'{33660,59925,34156,0,0,0,0,0,0,0},
'{56887,63633,49200,0,0,0,0,0,0,0},
'{49029,35983,39383,0,0,0,0,0,0,0},
'{43079,44509,37036,0,0,0,0,0,0,0},
'{38668,63169,44739,0,0,0,0,0,0,0},
'{35609,55785,40330,0,0,0,0,0,0,0},
'{33779,35302,34953,0,0,0,0,0,0,0},
'{32971,41734,32768,0,0,0,0,0,0,0},
'{32781,45590,32768,0,0,0,0,0,0,0},
'{32770,32768,32768,0,0,0,0,0,0,0},
'{32770,32768,32768,0,0,0,0,0,0,0},
'{32770,32768,32768,0,0,0,0,0,0,0},
'{32770,32768,32768,0,0,0,0,0,0,0}
},'{ // alphabet size = 3 bits
'{32768,32768,32768,32768,0,0,0,0,0,0},
'{48485,53182,61036,40101,0,0,0,0,0,0},
'{37267,44934,59225,51004,0,0,0,0,0,0},
'{58887,39285,59932,34152,0,0,0,0,0,0},
'{47460,35493,63633,49200,0,0,0,0,0,0},
'{38824,33257,35983,39383,0,0,0,0,0,0},
'{64269,65329,44509,37036,0,0,0,0,0,0},
'{53795,34380,63161,44739,0,0,0,0,0,0},
'{45668,40415,55785,40330,0,0,0,0,0,0},
'{39621,57266,35320,34953,0,0,0,0,0,0},
'{35561,56584,41943,32768,0,0,0,0,0,0},
'{33424,53177,52429,32768,0,0,0,0,0,0},
'{32808,56680,32768,32768,0,0,0,0,0,0},
'{32772,32768,32768,32768,0,0,0,0,0,0},
'{32772,32768,32768,32768,0,0,0,0,0,0},
'{32772,32768,32768,32768,0,0,0,0,0,0}
},'{ // alphabet size = 4 bits
'{32768,32768,32768,32768,32768,0,0,0,0,0},
'{47385,49646,53177,61036,40101,0,0,0,0,0},
'{35606,39091,44941,59231,50995,0,0,0,0,0},
'{54934,63452,39285,59932,34152,0,0,0,0,0},
'{43133,52753,35489,63640,49200,0,0,0,0,0},
'{34241,44825,33255,35983,39383,0,0,0,0,0},
'{54671,38977,65337,44502,37036,0,0,0,0,0},
'{43721,34950,34380,63191,44620,0,0,0,0,0},
'{34971,32897,40415,55785,40330,0,0,0,0,0},
'{56099,33723,57260,35246,37449,0,0,0,0,0},
'{45527,40614,56584,42367,32768,0,0,0,0,0},
'{38107,33996,53177,32768,32768,0,0,0,0,0},
'{33953,60787,61681,32768,32768,0,0,0,0,0},
'{32804,36792,32768,32768,32768,0,0,0,0,0},
'{32776,32768,32768,32768,32768,0,0,0,0,0},
'{32776,32768,32768,32768,32768,0,0,0,0,0}
},'{ // alphabet size = 5 bits
'{32768,32768,32768,32768,32768,32768,0,0,0,0},
'{46847,47952,49637,53177,61008,40113,0,0,0,0},
'{34789,36452,39085,44949,59231,50995,0,0,0,0},
'{53019,57005,63460,39268,59919,34169,0,0,0,0},
'{41070,45405,52759,35489,63640,49200,0,0,0,0},
'{64173,36702,44829,33255,35983,39383,0,0,0,0},
'{50231,59972,38971,65345,44531,36954,0,0,0,0},
'{39151,49495,34953,34380,63191,44620,0,0,0,0},
'{60465,41470,32897,40427,55738,40330,0,0,0,0},
'{46139,35772,33723,57260,35395,32768,0,0,0,0},
'{34815,32882,40611,56537,43691,32768,0,0,0,0},
'{52370,34980,34005,53092,32768,32768,0,0,0,0},
'{40297,53919,60787,37449,32768,32768,0,0,0,0},
'{33883,64404,47663,32768,32768,32768,0,0,0,0},
'{32784,32768,32768,32768,32768,32768,0,0,0,0},
'{32784,32768,32768,32768,32768,32768,0,0,0,0}
},'{ // alphabet size = 6 bits
'{32768,32768,32768,32768,32768,32768,32768,0,0,0},
'{46571,47160,47935,49637,53177,61064,40089,0,0,0},
'{34397,35191,36452,39085,44949,59231,50995,0,0,0},
'{52083,53968,57017,63460,39268,59919,34169,0,0,0},
'{40065,42127,45405,52759,35507,63610,49200,0,0,0},
'{62080,33206,36702,44829,33239,36003,39383,0,0,0},
'{48098,52562,59972,38971,65313,44502,37118,0,0,0},
'{36985,41592,49490,34953,34380,63191,44620,0,0,0},
'{56047,32820,41470,32897,40427,55738,40330,0,0,0},
'{41595,51797,35772,33723,57309,35246,32768,0,0,0},
'{60147,41336,32880,40623,56489,45590,32768,0,0,0},
'{42205,34492,34984,33996,54120,32768,32768,0,0,0},
'{57716,33379,53924,60787,32768,32768,32768,0,0,0},
'{40028,55171,64404,32768,32768,32768,32768,0,0,0},
'{32964,51306,32768,32768,32768,32768,32768,0,0,0},
'{32800,32768,32768,32768,32768,32768,32768,0,0,0}
},'{ // alphabet size = 7 bits
'{32768,32768,32768,32768,32768,32768,32768,32768,0,0},
'{46474,46733,47127,47935,49637,53092,61008,40137,0,0},
'{34204,34557,35246,36472,39108,44859,59283,50995,0,0},
'{51622,52593,53946,56968,63430,39291,60026,34100,0,0},
'{39569,40574,42127,45405,52759,35470,63792,49056,0,0},
'{61064,63132,33189,36712,44799,33255,35926,39569,0,0},
'{47061,49200,52552,59972,38994,65281,44620,36792,0,0},
'{35926,38108,41592,49490,34953,34344,63072,45590,0,0},
'{53914,58343,32816,41476,32897,40378,55554,43691,0,0},
'{39435,43999,51802,35772,33706,57260,35545,32768,0,0},
'{55727,65329,41336,32880,40623,56680,47663,32768,0,0},
'{37609,48085,34486,34989,33962,56680,32768,32768,0,0},
'{47830,36376,33379,53924,61681,32768,32768,32768,0,0},
'{57076,33506,55166,32961,32768,32768,32768,32768,0,0},
'{35504,57567,63550,32768,32768,32768,32768,32768,0,0},
'{32832,32768,32768,32768,32768,32768,32768,32768,0,0}
},'{ // alphabet size = 8 bits
'{32768,32768,32768,32768,32768,32768,32768,32768,32768,0},
'{46346,46603,46733,47127,47935,49637,53092,61008,40137,0},
'{34100,34380,34521,35246,36472,39108,44859,59075,51150,0},
'{51385,51862,52593,53946,56968,63430,39383,59919,34100,0},
'{39337,39804,40525,42154,45405,52759,35470,63550,49345,0},
'{60568,61568,63132,33189,36712,44859,33288,35849,39569,0},
'{46539,47595,49200,52552,59919,39017,65281,44384,37449,0},
'{35414,36452,38130,41579,49490,34916,34380,63550,43691,0},
'{52883,54962,58356,32816,41476,32864,40525,55188,43691,0},
'{38381,40537,44006,51802,35791,33689,57456,36158,32768,0},
'{53601,58028,65329,41336,32880,40623,56299,32768,32768,0},
'{35437,40059,48089,34486,34989,33962,61681,32768,32768,0},
'{43307,53415,36373,33387,53903,65028,32768,32768,32768,0},
'{47162,36136,33504,55188,34953,32768,32768,32768,32768,0},
'{45360,40855,57555,59919,32768,32768,32768,32768,32768,0},
'{32896,32768,32768,32768,32768,32768,32768,32768,32768,0}
},'{ // alphabet size = 9 bits
'{32768,32768,32768,32768,32768,32768,32768,32768,32768,32768},
'{46346,46346,46864,46603,47127,47935,49637,53431,61231,39946},
'{34100,34100,34380,34521,35246,36314,39199,44859,59075,51150},
'{51306,51622,51782,52593,54120,57065,63310,39383,59494,34380},
'{39199,39569,39756,40525,42260,45344,52593,35545,64035,48771},
'{60241,60897,61455,63310,33157,36712,44859,33288,36158,38836},
'{46282,46798,47595,49128,52593,59919,39017,32768,44151,37449},
'{35136,35658,36472,38130,41579,49563,34880,34380,63550,43691},
'{52347,53431,54962,58406,32800,41425,32897,40525,56680,32768},
'{37872,38926,40525,44035,51822,35772,33689,57065,40330,32768},
'{52552,54693,58053,65281,41323,32897,40525,56680,32768,32768},
'{34380,36552,40065,48089,34486,34989,33962,37449,32768,32768},
'{41152,45707,53409,36373,33371,54033,36158,32768,32768,32768},
'{42629,52769,36138,33504,55188,39946,32768,32768,32768,32768},
'{34630,32860,40858,59023,32768,32768,32768,32768,32768,32768},
'{33026,32768,32768,32768,32768,32768,32768,32768,32768,32768}
}
}; // end rf_table


   wire [`MDU_RANS_PROB_BITS-1:0]      rf_table_sel1[16][10];
   assign rf_table_sel1 = rf_table[eab];
   reg [`MDU_RANS_PROB_BITS-1:0]       rf_table_sel2[10];

wire [4:0] rs_table[9][16][10];
assign rs_table = '{
'{ // alphabet size = 1 bit
'{15,15,0,0,0,0,0,0,0,0},
'{16,15,0,0,0,0,0,0,0,0},
'{16,15,0,0,0,0,0,0,0,0},
'{16,14,0,0,0,0,0,0,0,0},
'{16,14,0,0,0,0,0,0,0,0},
'{16,13,0,0,0,0,0,0,0,0},
'{16,12,0,0,0,0,0,0,0,0},
'{16,11,0,0,0,0,0,0,0,0},
'{16,9,0,0,0,0,0,0,0,0},
'{16,6,0,0,0,0,0,0,0,0},
'{16,1,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 2 bits
'{14,14,14,0,0,0,0,0,0,0},
'{15,15,14,0,0,0,0,0,0,0},
'{15,15,14,0,0,0,0,0,0,0},
'{15,15,13,0,0,0,0,0,0,0},
'{16,15,13,0,0,0,0,0,0,0},
'{16,14,12,0,0,0,0,0,0,0},
'{16,14,11,0,0,0,0,0,0,0},
'{16,14,10,0,0,0,0,0,0,0},
'{16,13,8,0,0,0,0,0,0,0},
'{16,11,5,0,0,0,0,0,0,0},
'{16,9,0,0,0,0,0,0,0,0},
'{16,5,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 3 bits
'{13,13,13,13,0,0,0,0,0,0},
'{14,14,14,13,0,0,0,0,0,0},
'{14,14,14,13,0,0,0,0,0,0},
'{15,14,14,12,0,0,0,0,0,0},
'{15,14,14,12,0,0,0,0,0,0},
'{15,14,13,11,0,0,0,0,0,0},
'{16,15,13,10,0,0,0,0,0,0},
'{16,14,13,9,0,0,0,0,0,0},
'{16,14,12,7,0,0,0,0,0,0},
'{16,14,10,4,0,0,0,0,0,0},
'{16,13,8,0,0,0,0,0,0,0},
'{16,11,4,0,0,0,0,0,0,0},
'{16,7,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 4 bits
'{12,12,12,12,12,0,0,0,0,0},
'{13,13,13,13,12,0,0,0,0,0},
'{13,13,13,13,12,0,0,0,0,0},
'{14,14,13,13,11,0,0,0,0,0},
'{14,14,13,13,11,0,0,0,0,0},
'{14,14,13,12,10,0,0,0,0,0},
'{15,14,14,12,9,0,0,0,0,0},
'{15,14,13,12,8,0,0,0,0,0},
'{15,14,13,11,6,0,0,0,0,0},
'{16,14,13,9,3,0,0,0,0,0},
'{16,14,12,7,0,0,0,0,0,0},
'{16,13,10,2,0,0,0,0,0,0},
'{16,12,6,0,0,0,0,0,0,0},
'{16,6,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 5 bits
'{11,11,11,11,11,11,0,0,0,0},
'{12,12,12,12,12,11,0,0,0,0},
'{12,12,12,12,12,11,0,0,0,0},
'{13,13,13,12,12,10,0,0,0,0},
'{13,13,13,12,12,10,0,0,0,0},
'{14,13,13,12,11,9,0,0,0,0},
'{14,14,13,13,11,8,0,0,0,0},
'{14,14,13,12,11,7,0,0,0,0},
'{15,14,13,12,10,5,0,0,0,0},
'{15,14,13,12,8,2,0,0,0,0},
'{15,14,13,11,6,0,0,0,0,0},
'{16,14,12,9,0,0,0,0,0,0},
'{16,14,11,4,0,0,0,0,0,0},
'{16,12,5,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 6 bits
'{10,10,10,10,10,10,10,0,0,0},
'{11,11,11,11,11,11,10,0,0,0},
'{11,11,11,11,11,11,10,0,0,0},
'{12,12,12,12,11,11,9,0,0,0},
'{12,12,12,12,11,11,9,0,0,0},
'{13,12,12,12,11,10,8,0,0,0},
'{13,13,13,12,12,10,7,0,0,0},
'{13,13,13,12,11,10,6,0,0,0},
'{14,13,13,12,11,9,4,0,0,0},
'{14,14,13,12,11,7,1,0,0,0},
'{15,14,13,12,10,5,0,0,0,0},
'{15,14,13,11,8,0,0,0,0,0},
'{16,14,13,10,2,0,0,0,0,0},
'{16,14,11,2,0,0,0,0,0,0},
'{16,9,0,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 7 bits
'{9,9,9,9,9,9,9,9,0,0},
'{10,10,10,10,10,10,10,9,0,0},
'{10,10,10,10,10,10,10,9,0,0},
'{11,11,11,11,11,10,10,8,0,0},
'{11,11,11,11,11,10,10,8,0,0},
'{12,12,11,11,11,10,9,7,0,0},
'{12,12,12,12,11,11,9,6,0,0},
'{12,12,12,12,11,10,9,5,0,0},
'{13,13,12,12,11,10,8,3,0,0},
'{13,13,13,12,11,10,6,0,0,0},
'{14,14,13,12,11,9,4,0,0,0},
'{14,14,13,12,10,7,0,0,0,0},
'{15,14,13,12,9,0,0,0,0,0},
'{16,14,13,9,0,0,0,0,0,0},
'{16,13,8,0,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 8 bits
'{8,8,8,8,8,8,8,8,8,0},
'{9,9,9,9,9,9,9,9,8,0},
'{9,9,9,9,9,9,9,9,8,0},
'{10,10,10,10,10,10,9,9,7,0},
'{10,10,10,10,10,10,9,9,7,0},
'{11,11,11,10,10,10,9,8,6,0},
'{11,11,11,11,11,10,10,8,5,0},
'{11,11,11,11,11,10,9,8,4,0},
'{12,12,12,11,11,10,9,7,2,0},
'{12,12,12,12,11,10,9,5,0,0},
'{13,13,13,12,11,10,8,2,0,0},
'{13,13,13,12,11,9,6,0,0,0},
'{14,14,13,12,11,8,0,0,0,0},
'{15,14,13,12,8,0,0,0,0,0},
'{16,14,12,6,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 9 bits
'{7,7,7,7,7,7,7,7,7,7},
'{8,8,8,8,8,8,8,8,8,7},
'{8,8,8,8,8,8,8,8,8,7},
'{9,9,9,9,9,9,9,8,8,6},
'{9,9,9,9,9,9,9,8,8,6},
'{10,10,10,10,9,9,9,8,7,5},
'{10,10,10,10,10,10,9,8,7,4},
'{10,10,10,10,10,10,9,8,7,3},
'{11,11,11,11,10,10,9,8,6,1},
'{11,11,11,11,11,10,9,8,4,0},
'{12,12,12,12,11,10,9,7,0,0},
'{12,12,12,12,11,10,8,4,0,0},
'{13,13,13,12,11,10,6,0,0,0},
'{14,14,13,12,11,7,0,0,0,0},
'{15,14,13,11,0,0,0,0,0,0},
'{16,0,0,0,0,0,0,0,0,0}
}
}; // end rs_table

    wire [4:0]                     rs_table_sel1[16][10];
    assign rs_table_sel1 = rs_table[eab];
    reg  [4:0]                     rs_table_sel2[10];

wire rn_table[9][16][10];
assign rn_table = '{
'{ // alphabet size = 1 bit
'{0,0,0,0,0,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{0,1,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,1,0,0,0,0,0,0,0,0},
'{0,1,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{1,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 2 bits
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{1,0,1,0,0,0,0,0,0,0},
'{0,1,1,0,0,0,0,0,0,0},
'{0,0,1,0,0,0,0,0,0,0},
'{1,1,1,0,0,0,0,0,0,0},
'{0,1,0,0,0,0,0,0,0,0},
'{0,0,1,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{0,1,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 3 bits
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{1,0,0,1,0,0,0,0,0,0},
'{0,1,1,1,0,0,0,0,0,0},
'{1,1,0,1,0,0,0,0,0,0},
'{0,1,1,1,0,0,0,0,0,0},
'{0,0,1,0,0,0,0,0,0,0},
'{0,0,1,1,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,1,1,0,0,0,0,0,0,0},
'{1,1,1,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{1,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 4 bits
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{1,0,1,1,0,0,0,0,0,0},
'{1,1,1,1,1,0,0,0,0,0},
'{0,1,0,1,1,0,0,0,0,0},
'{1,1,1,1,1,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{0,1,0,1,1,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{1,1,1,1,1,0,0,0,0,0},
'{1,0,1,0,0,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{0,1,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 5 bits
'{0,0,0,0,0,0,0,0,0,0},
'{1,1,0,0,1,0,0,0,0,0},
'{1,1,0,1,1,0,0,0,0,0},
'{1,0,0,0,0,1,0,0,0,0},
'{1,1,0,0,1,1,0,0,0,0},
'{0,0,0,1,1,1,0,0,0,0},
'{1,1,1,0,1,1,0,0,0,0},
'{0,0,0,0,1,1,0,0,0,0},
'{1,1,0,1,1,0,0,0,0,0},
'{0,1,1,1,0,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{0,0,0,1,0,0,0,0,0,0},
'{1,0,1,1,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 6 bits
'{0,0,0,0,0,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{1,0,1,0,1,1,0,0,0,0},
'{0,0,0,0,0,0,1,0,0,0},
'{0,1,1,0,1,1,1,0,0,0},
'{1,0,0,0,0,0,1,0,0,0},
'{1,1,1,1,0,0,0,0,0,0},
'{0,1,1,0,0,1,1,0,0,0},
'{0,1,1,0,1,1,0,0,0,0},
'{1,0,1,1,1,1,0,0,0,0},
'{0,0,1,0,0,1,0,0,0,0},
'{1,1,1,1,1,0,0,0,0,0},
'{0,1,1,1,0,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{0,1,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 7 bits
'{0,0,0,0,0,0,0,0,0,0},
'{1,1,1,0,0,1,1,0,0,0},
'{1,0,1,1,0,0,1,0,0,0},
'{1,1,1,1,0,0,0,1,0,0},
'{0,0,1,1,0,0,0,1,0,0},
'{0,0,1,0,0,1,0,0,0,0},
'{0,1,0,1,1,0,1,1,0,0},
'{0,1,1,1,0,1,1,1,0,0},
'{0,0,1,1,0,1,0,0,0,0},
'{1,0,0,1,1,1,0,0,0,0},
'{0,0,0,1,0,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{1,0,1,1,0,0,0,0,0,0},
'{0,1,0,1,0,0,0,0,0,0},
'{1,1,1,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 8 bits
'{0,0,0,0,0,0,0,0,0,0},
'{0,1,1,1,0,0,1,1,0,0},
'{1,0,1,1,1,0,0,0,1,0},
'{1,0,1,1,1,0,1,0,1,0},
'{0,0,0,0,1,0,0,1,0,0},
'{0,0,0,1,0,0,1,0,0,0},
'{0,0,1,0,0,0,0,1,1,0},
'{0,1,1,1,1,1,0,1,0,0},
'{1,1,0,1,1,1,0,1,0,0},
'{0,0,0,0,1,1,1,0,0,0},
'{1,0,0,0,1,0,1,0,0,0},
'{1,1,1,0,0,0,0,0,0,0},
'{0,0,1,1,0,0,0,0,0,0},
'{1,0,1,1,0,0,0,0,0,0},
'{1,0,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0}
},'{ // alphabet size = 9 bits
'{0,0,0,0,0,0,0,0,0,0},
'{0,0,0,1,1,0,0,0,0,0},
'{1,1,0,1,1,1,1,0,0,1},
'{1,1,0,1,1,1,1,1,0,0},
'{1,0,1,0,0,0,1,0,1,0},
'{1,1,1,1,0,0,0,1,0,1},
'{0,1,0,1,1,0,0,0,0,1},
'{0,1,1,1,1,1,0,0,1,0},
'{1,0,1,1,1,1,0,0,0,0},
'{0,1,0,0,0,1,1,1,0,0},
'{0,1,0,0,1,0,0,0,0,0},
'{0,0,0,1,0,0,0,1,0,0},
'{1,0,1,1,0,0,0,0,0,0},
'{1,0,1,1,1,0,0,0,0,0},
'{1,1,0,0,0,0,0,0,0,0},
'{0,0,0,0,0,0,0,0,0,0}
}
}; // end rn_table

    wire                           rn_table_sel1[16][10];
    assign rn_table_sel1 = rn_table[eab];
    reg                            rn_table_sel2[10];

    // state
    localparam [2:0] /* synopsys enum ctrl_state */
                  DSTATE_IDLE          = 3'd0,           // idle state, needs kickoff
                  DSTATE_HDR0          = 3'd1,           // waiting for header byte 0
                  DSTATE_HDR1          = 3'd2,           // waiting for header byte 1
                  DSTATE_HDR2          = 3'd3,           // waiting for header byte 2
                  DSTATE_PROCESSING    = 3'd4,           // main processing state, reading input and generating output
                  DSTATE_DRAINING      = 3'd5;           // done with input, still generating output
    reg [2:0] /* synopsys enum ctrl_state */ ctrl_state;  

    
    reg phase;
    reg [7:0] input_buf;
    reg input_buf_full;
    reg sym_buf_full;
    reg [`MDU_MAX_INPUT_LOG2-1:0] input_remaining;
    reg [31:0] output_remaining;
    reg [31:0] rans_state_p0;
    reg [31:0] rans_state_p1;
    reg hdr3; // 3 byte header if set
    reg flush_per_frag;

    // Phase 1: rans state modified by input
    wire want_to_feed_rans = (rans_state_p0 < `MDU_RANS_LOWER_LIMIT) && (input_remaining > 0); // we want to read input from the input buffer into the rans decoder
    wire will_feed_rans = want_to_feed_rans && input_buf_full;
    wire [31:0] rans_state_with_input = will_feed_rans ? {rans_state_p0[23:0], input_buf} : rans_state_p0;
    wire [`MDU_MAX_INPUT_LOG2-1:0] new_input_remaining = will_feed_rans ? input_remaining - 1 : input_remaining;

    wire need_ib_load = !input_buf_full && ((ctrl_state == DSTATE_HDR0) || (ctrl_state == DSTATE_HDR1) || (ctrl_state == DSTATE_HDR2)
                                             || ((ctrl_state == DSTATE_PROCESSING) && (input_remaining > {18'b0,input_buf_full})));

        
    // Stall detect
    wire blocked_on_output = (sym_buf_full && !sym_ready);
    wire blocked_on_input = (need_ib_load && !din_valid);
    wire stall_p0 = array_stall || blocked_on_input || blocked_on_output;
    reg stall_p1;
    always @(posedge clk or negedge nrst) begin
      if(!nrst)  stall_p1 <= 0;
      else       stall_p1 <= stall_p0;
    end
      
    // Input buffer
    assign din_req = need_ib_load && (phase == 0) && !blocked_on_output;
    assign din_ready = din_req && !array_stall;

   wire [1:0] hdr0_z_field = input_buf[7:6];
   wire [3:0] hdr0_q_field = input_buf[3:0];
   wire [3:0] eab_unclamped = alphabet_bits - {2'b0,hdr0_z_field};
   wire [3:0] eab_clamped = eab_unclamped < 10 ? eab_unclamped : 9;
   
    // Phase 0: inverse distribution
    wire [`MDU_RANS_PROB_BITS-1:0] cf_in = rans_state_with_input[`MDU_RANS_PROB_BITS-1:0]; 

    genvar n;
    reg  [3:0] inv_seg;
    reg  [`MDU_RANS_SYMOUT_W-1:0] inv_base_x;
    reg  [15:0] dist_x; 

    always_comb begin
      if((cf_in >= base_table_sel2[09]) & (eab >= 8)) begin
        inv_seg    = 'd09;
        inv_base_x = (1 << ('d09 - 'd1));
        dist_x     = (cf_in - base_table_sel2[09]) + rn_table_sel2[09];
      end else if((cf_in >= base_table_sel2[08]) & (eab >= 7)) begin
        inv_seg    = 'd08;
        inv_base_x = (1 << ('d08 - 'd1));
        dist_x     = (cf_in - base_table_sel2[08]) + rn_table_sel2[08];
      end else if((cf_in >= base_table_sel2[07]) & (eab >= 6)) begin
        inv_seg    = 'd07;
        inv_base_x = (1 << ('d07 - 'd1));
        dist_x     = (cf_in - base_table_sel2[07]) + rn_table_sel2[07];
      end else if((cf_in >= base_table_sel2[06]) & (eab >= 5)) begin
        inv_seg    = 'd06;
        inv_base_x = (1 << ('d06 - 'd1));
        dist_x     = (cf_in - base_table_sel2[06]) + rn_table_sel2[06];
      end else if((cf_in >= base_table_sel2[05]) & (eab >= 4)) begin
        inv_seg    = 'd05;
        inv_base_x = (1 << ('d05 - 'd1));
        dist_x     = (cf_in - base_table_sel2[05]) + rn_table_sel2[05];
      end else if((cf_in >= base_table_sel2[04]) & (eab >= 3)) begin
        inv_seg    = 'd04;
        inv_base_x = (1 << ('d04 - 'd1));
        dist_x     = (cf_in - base_table_sel2[04]) + rn_table_sel2[04];
      end else if((cf_in >= base_table_sel2[03]) & (eab >= 2)) begin
        inv_seg    = 'd03;
        inv_base_x = (1 << ('d03 - 'd1));
        dist_x     = (cf_in - base_table_sel2[03]) + rn_table_sel2[03];
      end else if((cf_in >= base_table_sel2[02]) & (eab >= 1)) begin
        inv_seg    = 'd02;
        inv_base_x = (1 << ('d02 - 'd1));
        dist_x     = (cf_in - base_table_sel2[02]) + rn_table_sel2[02];
      end else if(cf_in >= base_table_sel2[01]) begin
        inv_seg    = 'd01;
        inv_base_x = (1 << ('d01 - 'd1));
        dist_x     = (cf_in - base_table_sel2[01]) + rn_table_sel2[01];
      end else begin
        inv_seg    = 'd00;
        inv_base_x = 'd00;
        dist_x     = (cf_in - base_table_sel2[00]) + rn_table_sel2[00];
      end 
    end

    wire [15:0] rf        = rf_table_sel2[inv_seg];     // inverse reciprocal
    wire [4:0]  rs        = rs_table_sel2[inv_seg];     // shift
    wire        rn        = rn_table_sel2[inv_seg];     // input offset
    wire [31:0] add_mul   = dist_x * rf; 
    wire [`MDU_RANS_SYMOUT_W-1:0] inv_steps  = (add_mul[31:15] >> rs);
    wire [`MDU_RANS_SYMOUT_W-1:0] new_sym  = inv_base_x + inv_steps;
    
    // Compute output and new rans state
    assign sym_valid = sym_buf_full && (phase == 0) && !stall_p0;
    wire next_sym_buf_full = (rans_state_with_input > `MDU_RANS_LOWER_LIMIT) && (output_remaining > 0);    
    wire [31:0] new_rans_state_p1 = rans_state_with_input;
    wire [31:0] new_output_remaining = (next_sym_buf_full && (output_remaining > 0)) ? output_remaining - 1 : output_remaining;
    
    // Phase 0: forward distribution
    reg [3:0] fwd_seg;
    reg [`MDU_RANS_SYMOUT_W-1:0] fwd_segstart;

    always_comb begin
      if(sym[8]) begin
        fwd_seg = 'd09;
        fwd_segstart = (1 << ('d09 - 1));
      end else if(sym[7]) begin
        fwd_seg = 'd08;
        fwd_segstart = (1 << ('d08 - 1));
      end else if(sym[6]) begin
        fwd_seg = 'd07;
        fwd_segstart = (1 << ('d07 - 1));
      end else if(sym[5]) begin
        fwd_seg = 'd06;
        fwd_segstart = (1 << ('d06 - 1));
      end else if(sym[4]) begin
        fwd_seg = 'd05;
        fwd_segstart = (1 << ('d05 - 1));
      end else if(sym[3]) begin
        fwd_seg = 'd04;
        fwd_segstart = (1 << ('d04 - 1));
      end else if(sym[2]) begin
        fwd_seg = 'd03;
        fwd_segstart = (1 << ('d03 - 1));
      end else if(sym[1]) begin
        fwd_seg = 'd02;
        fwd_segstart = (1 << ('d02 - 1));
      end else if(sym[0]) begin
        fwd_seg = 'd01;
        fwd_segstart = (1 << ('d01 - 1));
      end else begin
        fwd_seg = 'd00;
        fwd_segstart = 'd00;
      end
    end

    wire [15:0] fwd_base     = base_table_sel2[fwd_seg];
    wire [15:0] fwd_fa       = freq_table_sel2[fwd_seg];

    wire [`MDU_RANS_SYMOUT_W-1:0]  fwd_steps  = sym - fwd_segstart;
    wire [`MDU_RANS_PROB_BITS-1:0] fwd_cfa    = fwd_base + (fwd_fa * fwd_steps);
    wire [`MDU_RANS_PROB_BITS-1:0] fwd_f      = (fwd_cfa == 0) ? fwd_fa-1 : fwd_fa;
    wire [`MDU_RANS_PROB_BITS-1:0] fwd_cf     = (fwd_cfa == 0) ? 1 : fwd_cfa;
    wire [`MDU_RANS_PROB_BITS-1:0] fwd_p      = rans_state_p1[`MDU_RANS_PROB_BITS-1:0];
    wire [31:0] new_rans_state_p0             = (fwd_f * rans_state_p1[31:16]) + fwd_p - fwd_cf;

    // we can terminate slightly early due to trimming in the compressor
    wire legal_end_state = ((new_rans_state_p0 == `MDU_RANS_LOWER_LIMIT) || (new_rans_state_p0 == (`MDU_RANS_LOWER_LIMIT >> 8)) || (new_rans_state_p0 == (`MDU_RANS_LOWER_LIMIT >> 16)));
   
    // update
    always @(posedge clk or negedge nrst) begin
       if (!nrst) begin
          ctrl_state <= DSTATE_IDLE;
          phase <= 0;
          rans_state_p0 <= 0;
          rans_state_p1 <= 0;
          input_remaining <= 0;
          output_remaining <= 0;
          sym <= 0;
          sym_buf_full <= 0;
          input_buf_full <= 0;
          input_buf <= 0;
          done <= 0;
          error_overrun <= 0;
          eab <= 0;
          current_q <= 0;
          base_table_sel2  <= '{10{`MDU_RANS_PROB_BITS'h0}};
          freq_table_sel2  <= '{10{`MDU_RANS_PROB_BITS'h0}};
          rf_table_sel2    <= '{10{`MDU_RANS_PROB_BITS'h0}};
          rs_table_sel2    <= '{10{5'd0}};
          rn_table_sel2    <= '{10{1'd0}};
          hdr3 <= 0;
          flush_per_frag <= 0;
       end else begin
            if (!phase) begin

               error_overrun <= sym_valid & (output_remaining == 0) & !legal_end_state;

                // PHASE 0
                if (!stall_p0) begin

                   // propagate new rANS state
                    case (ctrl_state)
                        DSTATE_PROCESSING, DSTATE_DRAINING: begin
                           if (sym_buf_full) begin
                              rans_state_p0 <= new_rans_state_p0;
                           end else begin
                              rans_state_p0 <= rans_state_p1;
                           end
                        end
                        default: begin end // nop
                    endcase

                   // handle input
                   if (din_ready && din_valid) begin
                      input_buf <= din;
                      input_buf_full <= 1;
                   end

                   // handle output
                   if (sym_valid && sym_ready) begin
                      // sym <= 'hXX; // enable for sim
                      sym_buf_full <= 0;
                   end
                end
            end else if (!stall_p1) begin 
                   // PHASE 1
                case (ctrl_state)
                    DSTATE_IDLE: begin                    // waiting for launch
                        if (go) begin
                           ctrl_state <= DSTATE_HDR0;
                           output_remaining <= out_target;
                           done <= 0;
                           rans_state_p0 <= 0;
                           rans_state_p1 <= 0;
                       end
                    end 
                  DSTATE_HDR0: begin // waiting for first byte of a fragment header
                     if (input_buf_full) begin
                        input_remaining <= 0;
                        ctrl_state <= DSTATE_HDR1;
                        current_q <= hdr0_q_field;
                        hdr3 <= input_buf[5];
                        flush_per_frag <= input_buf[4];
                        eab <= eab_clamped;
                        input_buf_full <= 0;
                     end
                  end
                  DSTATE_HDR1: begin // waiting for second byte of a fragment header
                     if (input_buf_full) begin
                        input_buf_full <= 0;
                        base_table_sel2  <= base_table_sel1[current_q];
                        freq_table_sel2  <= freq_table_sel1[current_q];
                        rf_table_sel2    <= rf_table_sel1[current_q];
                        rs_table_sel2    <= rs_table_sel1[current_q];
                        rn_table_sel2    <= rn_table_sel1[current_q];
                        if (hdr3) begin
                           input_remaining <= {9'b0, input_buf};
                           ctrl_state <= DSTATE_HDR2;
                        end else begin
                           input_remaining <= {9'b0, input_buf} + 1;
                           ctrl_state <= DSTATE_PROCESSING;
                        end
                     end
                  end
                  DSTATE_HDR2: begin // waiting for third byte of a fragment header
                     if (input_buf_full) begin
                        input_remaining <= {input_buf, input_remaining[7:0]} + 257;
                        ctrl_state <= DSTATE_PROCESSING;
                        input_buf_full <= 0;
                     end
                  end
                    DSTATE_PROCESSING: begin
                       rans_state_p1 <= new_rans_state_p1;
                       input_remaining <= new_input_remaining;
                       output_remaining <= new_output_remaining;
                       input_buf_full <= input_buf_full & !will_feed_rans;
                       sym <= new_sym;
                       sym_buf_full <= next_sym_buf_full;
                       if (new_input_remaining == 0) begin
                          if (new_output_remaining > 0) begin
                             if (new_rans_state_p1 == `MDU_RANS_LOWER_LIMIT) begin
                                ctrl_state <= DSTATE_HDR0;
                                if (flush_per_frag) begin
                                   rans_state_p1 <= 0;
                                end
                             end else begin
                                ctrl_state <= DSTATE_DRAINING;
                             end
                          end else begin
                             done <= 1;
                             ctrl_state <= DSTATE_IDLE;
                          end
                       end 
                    end                        
                    DSTATE_DRAINING: begin
                       rans_state_p1 <= new_rans_state_p1;
                       output_remaining <= new_output_remaining;
                       sym <= new_sym;
                       sym_buf_full <= next_sym_buf_full;
                       if (new_rans_state_p1 <= `MDU_RANS_LOWER_LIMIT) begin
                          if (new_output_remaining > 0) begin
                             ctrl_state <= DSTATE_HDR0;
                             if (flush_per_frag) begin
                                rans_state_p0 <= 0;
                                rans_state_p1 <= 0;
                             end
                          end else begin
                             ctrl_state <= DSTATE_IDLE;
                             done <= 1;
                          end
                       end
                    end                                                
                   default:
                     ctrl_state <= DSTATE_IDLE;
                endcase // case (ctrl_state)
              end
        phase <= ~phase;
        end
    end
endmodule

